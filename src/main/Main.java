package main;

import java.util.ArrayList;
import java.util.List;

public class Main {

    public static void main(String[] args) {
        problemFour();
    }

    private static void problemOne() {
        /* If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

        Find the sum of all the multiples of 3 or 5 below 1000. */

        int sum = 0;

        for (int i = 0 ; i < 1000; i++) {
            if (i % 3 == 0 || i % 5 == 0) {
                sum += i;
            }
        }

        System.out.println(sum);
    }

    private static void problemTwo() {
        /* Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

        By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms. */

        int current = 0;
        List<Integer> sequence = new ArrayList<>();
        //added these two manually because the normal sequence starts with 0, 1, 1, 2
        //and sequence is based on previous two numbers
        sequence.add(1);
        sequence.add(2);
        int sum = 2;

        while (current < 4000000) {
            int size = sequence.size();
            current = sequence.get(size - 1) + sequence.get(size - 2);

            if (current % 2 == 0) {
                sum += current;
            }
            sequence.add(current);
        }

        System.out.println(sum);
    }

    private static void problemThree() {
        /* The prime factors of 13195 are 5, 7, 13 and 29.

            What is the largest prime factor of the number 600851475143 ? */

        long num = 600851475143L;
        int factor = 3;
        int lastFactor = 1;

        if (num % 2 == 0) {
            num /= 2;
            lastFactor = 2;

            while (num % 2 == 0) {
                num /= 2;
            }
        }

        while (num > 1) {
            if (num % factor == 0) {
                num /= factor;
                lastFactor = factor;

                while (num % factor == 0) {
                    num /= factor;
                }
            }

            factor += 2;
        }

        System.out.println(lastFactor);
    }

    private static void problemFour() {

    }

}
